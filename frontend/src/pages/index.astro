---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import LoginForm from '../components/LoginForm.astro';
import SignupForm from '../components/SignupForm.astro';
import AddressBook from '../components/AddressBook.astro';
---

<BaseLayout>
  <Header />
  
  <div class="content">
    <div id="alertContainer"></div>
    
    <LoginForm />
    <SignupForm />
    <AddressBook />
  </div>

  <script>
    import { testBackendConnectivity, login, signup, logout, addContact, getContacts, deleteContact } from '../utils/api';
    import { AuthManager } from '../utils/auth';
    import { UIManager, getFormData, resetForm, confirmDelete } from '../utils/utils';
    import type { LoginData, SignupData, ContactData } from '../utils/api';

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', async function() {
      setupEventListeners();
      updateUI();
      
      // Test backend connectivity
      const isConnected = await testBackendConnectivity();
      if (!isConnected) {
        UIManager.showAlert('Warning: Cannot connect to backend server on port 8000. Make sure the Rust backend is running.', 'error');
      }
    });

    function setupEventListeners() {
      // Navigation buttons
      const loginBtn = document.getElementById('loginBtn');
      const signupBtn = document.getElementById('signupBtn');
      const addressBookBtn = document.getElementById('addressBookBtn');
      const logoutBtn = document.getElementById('logoutBtn');

      loginBtn?.addEventListener('click', () => UIManager.showSection('login'));
      signupBtn?.addEventListener('click', () => UIManager.showSection('signup'));
      addressBookBtn?.addEventListener('click', () => UIManager.showSection('addressBook'));
      logoutBtn?.addEventListener('click', handleLogout);

      // Forms
      const loginForm = document.getElementById('loginForm');
      const signupForm = document.getElementById('signupForm');
      const addContactForm = document.getElementById('addContactForm');

      loginForm?.addEventListener('submit', handleLogin);
      signupForm?.addEventListener('submit', handleSignup);
      addContactForm?.addEventListener('submit', handleAddContact);

      // Load contacts button
      const loadContactsBtn = document.getElementById('loadContactsBtn');
      loadContactsBtn?.addEventListener('click', loadContacts);

      // Event delegation for delete buttons
      const contactsList = document.getElementById('contactsList');
      contactsList?.addEventListener('click', function(e) {
        if (e.target && (e.target as Element).closest('.delete-contact-btn')) {
          const button = (e.target as Element).closest('.delete-contact-btn') as HTMLButtonElement;
          const contactIdStr = button?.dataset.contactId;
          const contactId = parseInt(contactIdStr || '', 10);
          if (!isNaN(contactId)) {
            handleDeleteContact(contactId);
          }
        }
      });
    }

    function updateUI() {
      const isAuthenticated = AuthManager.isAuthenticated();
      const username = AuthManager.getCurrentUser();
      UIManager.updateAuthUI(isAuthenticated, username || undefined);
    }

    async function handleLogin(event: Event) {
      event.preventDefault();
      const form = event.target as HTMLFormElement;

      try {
        const formData = getFormData(form);
        const loginData: LoginData = {
          username_or_email: formData.username_or_email as string,
          password: formData.password as string
        };

        const authResponse = await login(loginData);
        AuthManager.setAuth(authResponse.token, authResponse.user.username);

        UIManager.showAlert('Login successful!', 'success');
        updateUI();
        resetForm(form);
      } catch (error) {
        UIManager.showAlert(`Login failed: ${(error as Error).message}`, 'error');
      }
    }

    async function handleSignup(event: Event) {
      event.preventDefault();
      const form = event.target as HTMLFormElement;

      try {
        const formData = getFormData(form);
        const signupData: SignupData = {
          username: formData.username as string,
          email: formData.email as string,
          password: formData.password as string
        };

        await signup(signupData);
        UIManager.showAlert('Signup successful! Please login.', 'success');
        UIManager.showSection('login');
        resetForm(form);
      } catch (error) {
        UIManager.showAlert(`Signup failed: ${(error as Error).message}`, 'error');
      }
    }

    async function handleLogout() {
      try {
        await logout();
      } catch (error) {
        UIManager.showAlert(`Logout request failed: ${(error as Error).message || String(error)}`, 'error');
      } finally {
        AuthManager.clearAuth();
        updateUI();
        UIManager.clearContactsList();
      }
    }

    async function handleAddContact(event: Event) {
      event.preventDefault();
      const form = event.target as HTMLFormElement;

      try {
        const formData = getFormData(form);
        const age = parseInt(formData.age as string);
        if (Number.isNaN(age) || age < 0) {
          UIManager.showAlert('Please enter a valid age (must be a positive number).', 'error');
          return;
        }

        const contactData: ContactData = {
          name: formData.name as string,
          gender: formData.gender as string,
          age: age,
          address: formData.address as string,
          phone: formData.phone as string,
          email: formData.email as string
        };

        await addContact(contactData);
        UIManager.showAlert('Contact added successfully!', 'success');
        resetForm(form);
        loadContacts();
      } catch (error) {
        UIManager.showAlert(`Failed to add contact: ${(error as Error).message}`, 'error');
      }
    }

    async function loadContacts() {
      try {
        const contacts = await getContacts();
        displayContacts(contacts);
      } catch (error) {
        UIManager.showAlert(`Failed to load contacts: ${(error as Error).message}`, 'error');
        const contactsList = document.getElementById('contactsList');
        if (contactsList) {
          contactsList.innerHTML = '<p>Failed to load contacts.</p>';
        }
      }
    }

    function displayContacts(contacts: any[]) {
      const contactsList = document.getElementById('contactsList');
      if (!contactsList) return;

      contactsList.innerHTML = '';

      if (contacts.length === 0) {
        const p = document.createElement('p');
        p.textContent = 'No contacts found. Add your first contact above!';
        contactsList.appendChild(p);
        return;
      }

      contacts.forEach(contact => {
        const addressItem = document.createElement('div');
        addressItem.className = 'address-item';

        const nameHeader = document.createElement('h4');
        nameHeader.textContent = contact.name;
        addressItem.appendChild(nameHeader);

        const detailsPara = document.createElement('p');
        detailsPara.innerHTML = '<strong>Age:</strong> <span class="age"></span> | <strong>Gender:</strong> <span class="gender"></span>';
        detailsPara.querySelector('.age')!.textContent = contact.age.toString();
        detailsPara.querySelector('.gender')!.textContent = contact.gender;
        addressItem.appendChild(detailsPara);

        const addressPara = document.createElement('p');
        addressPara.innerHTML = '<strong>Address:</strong> ';
        const addressText = document.createTextNode(contact.address);
        addressPara.appendChild(addressText);
        addressItem.appendChild(addressPara);

        const phonePara = document.createElement('p');
        phonePara.innerHTML = '<strong>Phone:</strong> ';
        const phoneText = document.createTextNode(contact.phone);
        phonePara.appendChild(phoneText);
        addressItem.appendChild(phonePara);

        const emailPara = document.createElement('p');
        emailPara.innerHTML = '<strong>Email:</strong> ';
        const emailText = document.createTextNode(contact.email);
        emailPara.appendChild(emailText);
        addressItem.appendChild(emailPara);

        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'actions';

        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'btn btn-danger delete-contact-btn';
        deleteBtn.setAttribute('data-contact-id', contact.id.toString());
        deleteBtn.textContent = 'Delete';
        actionsDiv.appendChild(deleteBtn);

        addressItem.appendChild(actionsDiv);
        contactsList.appendChild(addressItem);
      });
    }

    async function handleDeleteContact(contactId: number) {
      if (!(await confirmDelete())) {
        return;
      }

      try {
        await deleteContact(contactId);
        UIManager.showAlert('Contact deleted successfully!', 'success');
        loadContacts();
      } catch (error) {
        UIManager.showAlert(`Failed to delete contact: ${(error as Error).message}`, 'error');
      }
    }
  </script>
</BaseLayout>
